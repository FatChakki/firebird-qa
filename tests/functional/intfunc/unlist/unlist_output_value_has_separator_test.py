#coding:utf-8

"""
ID:          issue-8418
ISSUE:       https://github.com/FirebirdSQL/firebird/issues/8418
TITLE:  Character <S> must NOT occur in any value generated by UNLIST which gets this <S> as separator.
DESCRIPTION:
    Test restores two databases (clones of employee) that contain blob field that must be passed as argument to UNLIST().
    In both DB blobs were generated as random sequences of unicode characters from any avaliable ranges.
    None of values generated by UNLIST() must contain separator.
    But under some circumstatences this rule could be violated, see:
        https://github.com/FirebirdSQL/firebird/pull/8418#issuecomment-2781057324
        https://github.com/FirebirdSQL/firebird/pull/8418#issuecomment-2789227832
NOTES:
    Confirmed bug on 6.0.0.742 (17-apr-2025): separator presented in some of generated values.
    Checked on 6.0.0.744 (19-apr-2025) - all fine.
"""

from pathlib import Path
import zipfile
import locale
import pytest
from firebird.qa import *
from firebird.driver import connect

db = db_factory(charset = 'utf8')
act = python_act('db', substitutions=[('[ \t]+', ' ')])

tmp_fbk = temp_file('unlist_unexpected.tmp.fbk')
tmp_fdb = temp_file('unlist_unexpected.tmp.fdb')

@pytest.mark.version('>=6.0.0')
def test_1(act: Action, tmp_fbk: Path, tmp_fdb: Path, capsys):

    test_map = {'unlist-unexpected-6_0_0_716-a5b25c1.fbk' : '0x227b', 'unlist-unexpected-6_0_0_717-fbb6b0c.fbk' : '0x2114'}
    expected_out = []
    for i_fbk, i_chr in test_map.items():

        # 716: select u.* from unlist((select blob_fld from t_longblob), unicode_char(0x227b) returning blob character set utf8) as u(x) where x containing unicode_char(0x227b)
        # 717: select u.x, octet_length(u.x), position(unicode_char(0x2114) in u.x), unicode_char(0x2114) from unlist((select blob_fld from t_longblob), unicode_char(0x2114) returning blob character set utf8) as u(x) where x containing unicode_char(0x2114)

        zipped_fbk_file = zipfile.Path(act.files_dir / 'unlist-unexpected.zip', at = i_fbk)
        tmp_fbk.write_bytes(zipped_fbk_file.read_bytes())

        act.gbak(switches = ['-rep', str(tmp_fbk), str(tmp_fdb)], combine_output = True, io_enc = locale.getpreferredencoding())
        assert '' == act.stdout
        act.reset()

        test_sql = f"""
            with
            d as (
                select
                     blob_fld
                    ,unicode_char({i_chr}) as separator
                from t_longblob
            )
            , e as (
                select * from d, unlist(d.blob_fld, d.separator returning blob character set utf8) as u (unlist_token)
            )
            select e.unlist_token, position(e.separator in e.unlist_token) as separator_pos
            from e
            where e.unlist_token containing e.separator
            ;
        """

        with connect(str(tmp_fdb), user = act.db.user, password = act.db.password, charset = 'utf8') as con:
            print(i_fbk)
            expected_out.append(i_fbk)
            cur = con.cursor()
            cur.execute(test_sql)
            data = cur.fetchall()
            if data:
                print(f'### ERROR ### separator {i_chr} occurs at least in one record issued by UNLIST():')

                col = cur.description
                for r in data:
                    for i in range(len(col)):
                        print(' '.join((col[i][0], ':', str(r[i]))))


    act.expected_stdout = '\n'.join(expected_out)

    act.stdout = capsys.readouterr().out
    assert act.clean_stdout == act.clean_expected_stdout

#coding:utf-8

"""
ID:          issue-873
ISSUE:       873
TITLE:       Maximum key size using PXW_CSY collation
DESCRIPTION:
JIRA:        CORE-1802
FBTEST:      bugs.core_1802
NOTES:
    [26.06.2025] pzotov
    Separated expected output for FB major versions prior/since 6.x.
    No substitutions are used to suppress schema and quotes. Discussed with dimitr, 24.06.2025 12:39.

    Checked on 6.0.0.876; 5.0.3.1668; 4.0.6.3214; 3.0.13.33813.
"""

import pytest
from firebird.qa import *

db = db_factory(charset = 'win1250', page_size = 8192)

test_script = """
    -- https://firebirdsql.org/file/documentation/html/en/refdocs/fblangref50/firebird-50-language-reference.html#fblangref50-datatypes-chartypes-charindxs
    -- The following formula calculates the maximum length of an indexed string (in characters):
    -- max_char_length = FLOOR((page_size / 4 - 9) / N)
    -- where N is the number of bytes per character in the character set.
    create table test(
        id int generated by default as identity
        ,f01 varchar(999) character set win1250 collate pxw_csy
    );
    create index test_f01_unq on test(f01);
    commit;

    -- https://www.generatormix.com/random-czech-words-generator?number=50
    insert into test(f01) values('všechno');
    insert into test(f01) values('ženy');
    insert into test(f01) values('takové');
    insert into test(f01) values('vaši');
    insert into test(f01) values('velké');
    insert into test(f01) values('přijít');
    insert into test(f01) values('našeho');
    insert into test(f01) values('běžte');
    insert into test(f01) values('zatraceně');
    insert into test(f01) values('straně');
    insert into test(f01) values('bolí');
    insert into test(f01) values('svém');
    insert into test(f01) values('místa');
    insert into test(f01) values('mrzí');
    insert into test(f01) values('příště');
    insert into test(f01) values('horší');
    insert into test(f01) values('mladý');
    insert into test(f01) values('dívka');
    insert into test(f01) values('lásku');
    insert into test(f01) values('cítit');
    insert into test(f01) values('nedá');
    insert into test(f01) values('rozhodnutí');
    insert into test(f01) values('dětí');
    insert into test(f01) values('náma');
    insert into test(f01) values('těžký');
    insert into test(f01) values('líbilo');
    insert into test(f01) values('píše');
    insert into test(f01) values('dívku');
    insert into test(f01) values('zbývá');
    insert into test(f01) values('dítě');
    insert into test(f01) values('haló');
    insert into test(f01) values('děkuju');
    insert into test(f01) values('jaké');
    insert into test(f01) values('potřebuji');
    insert into test(f01) values('půl');
    insert into test(f01) values('skutečně');
    insert into test(f01) values('chtěli');
    insert into test(f01) values('okamžitě');
    insert into test(f01) values('slyšela');
    insert into test(f01) values('krásná');
    insert into test(f01) values('mrzí');
    insert into test(f01) values('zapomeň');
    insert into test(f01) values('lásku');
    insert into test(f01) values('dávej');
    insert into test(f01) values('museli');
    insert into test(f01) values('zachránil');
    insert into test(f01) values('každej');
    insert into test(f01) values('milé');
    insert into test(f01) values('neznamená');
    insert into test(f01) values('polož');
    insert into test(f01) values('zbraní');
    insert into test(f01) values('tátu');
    insert into test(f01) values('několika');
    commit;

    set planonly;
    select * from test where f01 = 'náma';
"""

act = isql_act('db', test_script)

expected_stdout_5x = """
    PLAN (TEST INDEX (TEST_F01_UNQ))
"""

expected_stdout_6x = """
    PLAN ("PUBLIC"."TEST" INDEX ("PUBLIC"."TEST_F01_UNQ"))
"""

@pytest.mark.version('>=3')
def test_1(act: Action):
    act.expected_stdout = expected_stdout_5x if act.is_version('<6') else expected_stdout_6x
    act.isql(switches = ['-q'], charset = 'win1250', input = test_script, combine_output = True)
    assert act.clean_stdout == act.clean_expected_stdout

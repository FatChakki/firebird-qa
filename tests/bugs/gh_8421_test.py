#coding:utf-8

"""
ID:          issue-8421
ISSUE:       8421
TITLE:       Add pointers tree to TempSpace class
DESCRIPTION:
    Test uses example provided in the ticket, but with different set of N values.
    Following results were achieved for set of N values provided in the ticket:
    ---------------------------------------------------
             BEFORE FIX                AFTER FIX
       N      time_ms   ratio      N    time_ms   ratio
    ---------------------------------------------------
      1000        218         |   1000      213    
      2000        627    2.88 |   2000      503    2.36
      4000       1493    2.38 |   4000      997    1.98
      8000       3835    2.57 |   8000     2157    2.16
     16000      14922    3.89 |  16000     4271    1.98
     32000      67525    4.53 |  32000     8697    2.04
     64000     253474    3.75 |  64000    17013    1.96
    128000    1007229    3.97 | 128000    35285    2.07
    ---------------------------------------------------

    For N = 375; 750; 1500; 3000; 6000; 12000; 24000; 48000:
    * BEFORE fix:
        poor_ratios = [2.324675324675325, 2.2960893854748603, 2.411192214111922, 2.4339051463168517, 3.16832504145937, 4.301753467678618, 4.9132749285149355]
        stdev(poor_ratios) = 1.0723186770194812

    * AFTER fix:
        good_ratios = [2.0357142857142856, 2.08187134502924, 1.9438202247191012, 2.066473988439306, 1.9713286713286713, 2.0503724725079815, 2.0278546712802767]
        stdev(good_ratios) = 0.05031744060704646
NOTES:
    [25.01.2025] pzotov
    Commits that fixed problem:
        6.x: https://github.com/FirebirdSQL/firebird/commit/8d6c46e0e1f8eec374008e5ded6be119264ed3a6
        5.x: https://github.com/FirebirdSQL/firebird/commit/00b699cc085278c26734bcfb4329d89a49d5d1e8

    Test executes for ~30s.
    Confirmed problem on 6.0.0.647-9fccb55.
    Checked on intermediate snapshots: 6.0.0.652-58633c8 (24.02.2025); 5.0.3.1624-00b699c (25.02.2025)
"""

from statistics import stdev
import time
import datetime as py_dt

import pytest
from firebird.qa import *

db = db_factory()
act = python_act('db')

#################
MAX_STD_DEV = 0.5
#################

@pytest.mark.version('>=5.0.3')
def test_1(act: Action, capsys):
    ddl_lst = []
    ddl_lst.extend(
        (
            """
                recreate table log_table(
                    log_id bigint generated by default as identity constraint pk_log_table primary key
                   ,field_name varchar(31) not null
                   ,old_value blob
                )
            """
           ,"""
                recreate table test_table (
                    id             bigint not null,
                    fld_01         varchar(40),
                    fld_02         date,
                    fld_03         varchar(40),
                    fld_04         date,
                    fld_05         varchar(1000),
                    fld_06         varchar(1000),
                    fld_07         numeric(15,2),
                    fld_08         date,
                    fld_09         varchar(95),
                    fld_10         bigint,
                    fld_11         bigint,
                    fld_12         bigint,
                    fld_13         varchar(250),
                    fld_14         bigint,
                    fld_15         date,
                    fld_16         integer,
                    fld_17         bigint,
                    fld_18         date,
                    fld_19         bigint,
                    fld_20         varchar(95),
                    fld_21         date,
                    fld_22         bigint,
                    fld_23         numeric(16,0),
                    fld_24         smallint,
                    fld_25         bigint,
                    fld_26         bigint,
                    fld_27         smallint default 0,
                    fld_28         date,
                    fld_29         smallint,
                    fld_30         date,
                    fld_31         date,
                    fld_32         date,
                    fld_33         date,
                    fld_34         date,
                    fld_35         date,
                    fld_36         date,
                    fld_37         date,
                    fld_38         date,
                    fld_39         date,
                    fld_40         smallint,
                    fld_41         smallint,
                    fld_42         smallint,
                    fld_43         bigint,
                    fld_44         bigint,
                    fld_45         bigint,
                    fld_46         smallint,
                    fld_47         varchar(1000),
                    fld_48         bigint,
                    fld_49         varchar(4000),
                    fld_50         bigint
                )
            """
           ,'create generator audit'
           ,'alter table test_table add constraint pk_test_table primary key (id) using descending index pk_test_table'
           ,"""
                create or alter trigger h$test_table for test_table
                active after update position 0
                as
                    declare id bigint;
                    declare o blob sub_type 1 segment size 80;
                begin
                    id = gen_id(audit, 1);
                    o = old.fld_01; if (o is distinct from new.fld_01) then begin insert into log_table(log_id, field_name, old_value) values(:id, 'fld_01', :o); end
                    o = old.fld_02; if (o is distinct from new.fld_02) then begin insert into log_table(log_id, field_name, old_value) values(:id, 'fld_02', :o); end
                    o = old.fld_03; if (o is distinct from new.fld_03) then begin insert into log_table(log_id, field_name, old_value) values(:id, 'fld_03', :o); end
                    o = old.fld_04; if (o is distinct from new.fld_04) then begin insert into log_table(log_id, field_name, old_value) values(:id, 'fld_04', :o); end
                    o = old.fld_05; if (o is distinct from new.fld_05) then begin insert into log_table(log_id, field_name, old_value) values(:id, 'fld_05', :o); end
                    o = old.fld_06; if (o is distinct from new.fld_06) then begin insert into log_table(log_id, field_name, old_value) values(:id, 'fld_06', :o); end
                    o = old.fld_07; if (o is distinct from new.fld_07) then begin insert into log_table(log_id, field_name, old_value) values(:id, 'fld_07', :o); end
                    o = old.fld_08; if (o is distinct from new.fld_08) then begin insert into log_table(log_id, field_name, old_value) values(:id, 'fld_08', :o); end
                    o = old.fld_09; if (o is distinct from new.fld_09) then begin insert into log_table(log_id, field_name, old_value) values(:id, 'fld_09', :o); end
                    o = old.fld_10; if (o is distinct from new.fld_10) then begin insert into log_table(log_id, field_name, old_value) values(:id, 'fld_10', :o); end

                    
                    o = old.fld_11; if (o is distinct from new.fld_11) then begin insert into log_table(log_id, field_name, old_value) values(:id, 'fld_11', :o); end
                    o = old.fld_12; if (o is distinct from new.fld_12) then begin insert into log_table(log_id, field_name, old_value) values(:id, 'fld_12', :o); end
                    o = old.fld_13; if (o is distinct from new.fld_13) then begin insert into log_table(log_id, field_name, old_value) values(:id, 'fld_13', :o); end
                    o = old.fld_14; if (o is distinct from new.fld_14) then begin insert into log_table(log_id, field_name, old_value) values(:id, 'fld_14', :o); end
                    o = old.fld_15; if (o is distinct from new.fld_15) then begin insert into log_table(log_id, field_name, old_value) values(:id, 'fld_15', :o); end
                    o = old.fld_16; if (o is distinct from new.fld_16) then begin insert into log_table(log_id, field_name, old_value) values(:id, 'fld_16', :o); end
                    o = old.fld_17; if (o is distinct from new.fld_17) then begin insert into log_table(log_id, field_name, old_value) values(:id, 'fld_17', :o); end
                    o = old.fld_18; if (o is distinct from new.fld_18) then begin insert into log_table(log_id, field_name, old_value) values(:id, 'fld_18', :o); end
                    o = old.fld_19; if (o is distinct from new.fld_19) then begin insert into log_table(log_id, field_name, old_value) values(:id, 'fld_19', :o); end
                    o = old.fld_20; if (o is distinct from new.fld_20) then begin insert into log_table(log_id, field_name, old_value) values(:id, 'fld_20', :o); end

                    
                    o = old.fld_21; if (o is distinct from new.fld_21) then begin insert into log_table(log_id, field_name, old_value) values(:id, 'fld_21', :o); end
                    o = old.fld_22; if (o is distinct from new.fld_22) then begin insert into log_table(log_id, field_name, old_value) values(:id, 'fld_22', :o); end
                    o = old.fld_23; if (o is distinct from new.fld_23) then begin insert into log_table(log_id, field_name, old_value) values(:id, 'fld_23', :o); end
                    o = old.fld_24; if (o is distinct from new.fld_24) then begin insert into log_table(log_id, field_name, old_value) values(:id, 'fld_24', :o); end
                    o = old.fld_25; if (o is distinct from new.fld_25) then begin insert into log_table(log_id, field_name, old_value) values(:id, 'fld_25', :o); end
                    o = old.fld_26; if (o is distinct from new.fld_26) then begin insert into log_table(log_id, field_name, old_value) values(:id, 'fld_26', :o); end
                    o = old.fld_27; if (o is distinct from new.fld_27) then begin insert into log_table(log_id, field_name, old_value) values(:id, 'fld_27', :o); end
                    o = old.fld_28; if (o is distinct from new.fld_28) then begin insert into log_table(log_id, field_name, old_value) values(:id, 'fld_28', :o); end
                    o = old.fld_29; if (o is distinct from new.fld_29) then begin insert into log_table(log_id, field_name, old_value) values(:id, 'fld_29', :o); end
                    o = old.fld_30; if (o is distinct from new.fld_30) then begin insert into log_table(log_id, field_name, old_value) values(:id, 'fld_30', :o); end

                    
                    o = old.fld_31; if (o is distinct from new.fld_31) then begin insert into log_table(log_id, field_name, old_value) values(:id, 'fld_31', :o); end
                    o = old.fld_32; if (o is distinct from new.fld_32) then begin insert into log_table(log_id, field_name, old_value) values(:id, 'fld_32', :o); end
                    o = old.fld_33; if (o is distinct from new.fld_33) then begin insert into log_table(log_id, field_name, old_value) values(:id, 'fld_33', :o); end
                    o = old.fld_34; if (o is distinct from new.fld_34) then begin insert into log_table(log_id, field_name, old_value) values(:id, 'fld_34', :o); end
                    o = old.fld_35; if (o is distinct from new.fld_35) then begin insert into log_table(log_id, field_name, old_value) values(:id, 'fld_35', :o); end
                    o = old.fld_36; if (o is distinct from new.fld_36) then begin insert into log_table(log_id, field_name, old_value) values(:id, 'fld_36', :o); end
                    o = old.fld_37; if (o is distinct from new.fld_37) then begin insert into log_table(log_id, field_name, old_value) values(:id, 'fld_37', :o); end
                    o = old.fld_38; if (o is distinct from new.fld_38) then begin insert into log_table(log_id, field_name, old_value) values(:id, 'fld_38', :o); end
                    o = old.fld_39; if (o is distinct from new.fld_39) then begin insert into log_table(log_id, field_name, old_value) values(:id, 'fld_39', :o); end
                    o = old.fld_40; if (o is distinct from new.fld_40) then begin insert into log_table(log_id, field_name, old_value) values(:id, 'fld_40', :o); end


                    
                    o = old.fld_41; if (o is distinct from new.fld_41) then begin insert into log_table(log_id, field_name, old_value) values(:id, 'fld_41', :o); end
                    o = old.fld_42; if (o is distinct from new.fld_42) then begin insert into log_table(log_id, field_name, old_value) values(:id, 'fld_42', :o); end
                    o = old.fld_43; if (o is distinct from new.fld_43) then begin insert into log_table(log_id, field_name, old_value) values(:id, 'fld_43', :o); end
                    o = old.fld_44; if (o is distinct from new.fld_44) then begin insert into log_table(log_id, field_name, old_value) values(:id, 'fld_44', :o); end
                    o = old.fld_45; if (o is distinct from new.fld_45) then begin insert into log_table(log_id, field_name, old_value) values(:id, 'fld_45', :o); end
                    o = old.fld_46; if (o is distinct from new.fld_46) then begin insert into log_table(log_id, field_name, old_value) values(:id, 'fld_46', :o); end
                    o = old.fld_47; if (o is distinct from new.fld_47) then begin insert into log_table(log_id, field_name, old_value) values(:id, 'fld_47', :o); end
                    o = old.fld_48; if (o is distinct from new.fld_48) then begin insert into log_table(log_id, field_name, old_value) values(:id, 'fld_48', :o); end
                    o = old.fld_49; if (o is distinct from new.fld_49) then begin insert into log_table(log_id, field_name, old_value) values(:id, 'fld_49', :o); end
                    o = old.fld_50; if (o is distinct from new.fld_50) then begin insert into log_table(log_id, field_name, old_value) values(:id, 'fld_50', :o); end
                end
            """
           ,"""
                execute block
                as
                    declare id bigint;
                begin
                    id = 0;
                    while (id < 128000) do
                    begin
                        insert into test_table (id,fld_01,fld_02,fld_03,fld_04,fld_05,fld_06,fld_07,fld_08,fld_09,fld_10,fld_11,fld_12,fld_13,fld_14,fld_15,fld_16,fld_17,fld_18,fld_19,fld_20,fld_21,fld_22,fld_23,fld_24,fld_25,fld_26,fld_27,fld_28,fld_29,fld_30,fld_31,fld_32,fld_33,fld_34,fld_35,fld_36,fld_37,fld_38,fld_39,fld_40,fld_41,fld_42,fld_43,fld_44,fld_45,fld_46,fld_47,fld_48,fld_49,fld_50)
                            values ( 
                                     :id,
                                     'Identifier',
                                     '2025-01-23',
                                     '1234567890123456789',
                                     '2025-01-23',
                                     'Test data',
                                     'Test another data',
                                     500,
                                     '2025-01-24',
                                     'Test Test Test',
                                     3,
                                     12345678901234,
                                     12,
                                     'Test',
                                     12345678901234,
                                     '2025-01-30',
                                     0,
                                     NULL,
                                     '2025-01-31',
                                     12345679801234,
                                     'Test Test data',
                                     NULL,
                                     1234,
                                     1234567,
                                     2025,
                                     NULL,
                                     NULL,
                                     0,
                                     '2025-02-01',
                                     0,
                                     NULL,
                                     NULL,
                                     NULL,
                                     NULL,
                                     '2025-01-15',
                                     NULL,
                                     NULL,
                                     NULL,
                                     NULL,
                                     NULL,
                                     1,
                                     0,
                                     0,
                                     NULL,
                                     12346579801234,
                                     12345678901234,
                                     NULL,
                                     'Long test data for varchar(1000)',
                                     12345678901234,
                                     'Very long test data for varchar(4000)... Very long test data for varchar(4000)... Very long test data for varchar(4000)... Very long test data for varchar(4000)... Very long test data for varchar(4000)...',
                                     0
                                   );

                        id = id + 1;
                    end
                end
            """
           ,"""
                create or alter procedure run_test(a int)
                returns (t_cnt int, t_diff bigint)
                as
                    declare id bigint;
                    declare t_begin timestamp;
                    declare t_end timestamp;
                begin
                    t_cnt = a;
                    t_begin = 'now';
                    for
                        select id
                        from test_table
                        where
                            id >= 0 and id < :t_cnt
                     into :id do
                        update test_table set fld_50 = :t_cnt where id = :id;
                    t_end = 'now';
                    t_diff = datediff(millisecond from :t_begin to :t_end);
                    suspend;
                end
            """
        )
    )
    
    with act.db.connect() as con:
        for x in ddl_lst:
            con.execute_immediate(x)
            con.commit()

        #--------------------------------------

        cur = con.cursor()
        rs = None
        ps = cur.prepare('select t.* from run_test(?) t')
        elapsed_time_ratios = []
        ms_prev = -1
        for n in (0.375, 0.75, 1.5, 3, 6, 12, 24, 48):
            # d1 = py_dt.timedelta(0)
            rs = cur.execute(ps, ( int(n * 1000),))
            t1 = py_dt.datetime.now()
            cur.fetchall()
            t2 = py_dt.datetime.now()
            con.commit()
            d1 = t2-t1
            ms_curr = d1.seconds*1000 + d1.microseconds//1000

            if ms_prev > 0:
                elapsed_time_ratios.append(ms_curr / ms_prev)
            ms_prev = ms_curr

        if rs:
            rs.close() # <<< EXPLICITLY CLOSING CURSOR RESULTS
        if ps:
            ps.free()

    expected_msg = 'Expected: data dispersion is low.'
    std_deviation = stdev(elapsed_time_ratios)
    if std_deviation <= MAX_STD_DEV:
        print(expected_msg)
    else:
        print(f'UNEXPECTED: standard deviation of elapsed time ratios is {std_deviation} - greater than {MAX_STD_DEV=}')
        print(f'Elapsed time ratios: {elapsed_time_ratios}')

    act.expected_stdout = f"""
        {expected_msg}
    """
    act.stdout = capsys.readouterr().out
    assert act.clean_stdout == act.clean_expected_stdout

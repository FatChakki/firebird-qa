#coding:utf-8

"""
ID:          n/a
ISSUE:       https://github.com/FirebirdSQL/firebird/issues/6413
TITLE:       Data pages of newly gbak restored databases should be marked as "swept"
DESCRIPTION:
NOTES:
    [17.07.2025] pzotov
    Test adds a table and fill it with some data.
    Then we make b/r and obtain statistics using 'gstat -d ...'
    Output will contain lines like: "Primary pages: 1, secondary pages: 1, swept pages: 1"
    We have to check that in every such line value of primary pages is equal to swept pages
    or it can be greater but NO MORE than for <MAX_NUM_OF_EMPTY_PAGES> because of pages
    allocation algorithm.

    Explained by Vlad, 17.07.2025 16:34.
    Confirmed on 6.0.0.799
    Checked on 6.0.0.1020 ; 5.0.3.1683
"""
import string
import locale
import re
from io import BytesIO
from firebird.driver import SrvRestoreFlag
import pytest
from firebird.qa import *

init_sql = """
    set bail on;
    recreate table test(id int generated by default as identity, s varchar(32760));
    set term ^;
    execute block as
        declare n int = 1000;
        declare i int = 0;
    begin
        while (i < n) do
        begin
            insert into test(s) values(lpad('', rand()*32760, uuid_to_char(gen_uuid())));
            i = i + 1;
        end
    end^
    set term ;^
    commit;
"""
db = db_factory(init = init_sql, charset = 'win1251', page_size = 8192)

act = python_act('db')

#-----------------------------------------------------------

REMOVE_PUNCT = str.maketrans('', '', string.punctuation)
MAX_NUM_OF_EMPTY_PAGES = 7
EXPECTED_MSG = f'Expected: no lines with difference between primary and swept pages GREATER than {MAX_NUM_OF_EMPTY_PAGES}'

@pytest.mark.version('>=5.0.3')
def test_1(act: Action, capsys):
    backup = BytesIO()
    with act.connect_server() as srv:
        srv.database.local_backup(database = act.db.db_path, backup_stream = backup)
        backup.seek(0)
        srv.database.local_restore(backup_stream = backup, database = act.db.db_path, flags = SrvRestoreFlag.REPLACE)

    act.gstat(switches=['-d' ], io_enc = locale.getpreferredencoding())
    # Primary pages: 1, secondary pages: 1, swept pages: 1
    #   0       1    2      3       4    5    6      7   8
    p_swept_pages = re.compile(r'Primary pages(:)?\s+\d+.*swept pages(:)?\s+\d+', re.IGNORECASE)
    non_swept_line_indices = []
    for idx, line in enumerate(act.stdout.splitlines()):
        if p_swept_pages.search(line):
            tokens = line.split()
            if len(tokens) >= 9:
                try:
                    primary_pages_count = int(tokens[2].translate(REMOVE_PUNCT))
                    swept_pages_count = int(tokens[8].translate(REMOVE_PUNCT))
                    if primary_pages_count - swept_pages_count > MAX_NUM_OF_EMPTY_PAGES:
                        non_swept_line_indices.append( (idx, line) )
                except ValueError as e:
                    print(e.__str__())
            else:
                print('Line does not contain all expected tokens: "{line=}"')

    if non_swept_line_indices:
        print(f'At least one line contains difference between primary and swept pages GREATER than {MAX_NUM_OF_EMPTY_PAGES}:')
        for p in non_swept_line_indices:
            print(f'Line #{p[0]}, text: {p[1].strip()}')
    else:
        print(EXPECTED_MSG)

    act.expected_stdout = EXPECTED_MSG
    act.stdout = capsys.readouterr().out
    assert act.clean_stdout == act.clean_expected_stdout
